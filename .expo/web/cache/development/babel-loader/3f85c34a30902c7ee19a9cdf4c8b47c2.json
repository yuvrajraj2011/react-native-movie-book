{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_LATESTMOVIES_BEGIN, FETCH_PRODUCTS_SUCCESS, FETCH_LATESTMOVIES_FAILURE } from \"../Actions/LatestMoviesActions\";\nvar initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function productReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_PRODUCTS_BEGIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_PRODUCTS_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        items: action.payload\n      });\n\n    case FETCH_PRODUCTS_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bhamud/Downloads/react-native-movie-book/Reducers/ProductReducer.js"],"names":["FETCH_LATESTMOVIES_BEGIN","FETCH_PRODUCTS_SUCCESS","FETCH_LATESTMOVIES_FAILURE","initialState","items","loading","error","productReducer","state","action","type","FETCH_PRODUCTS_BEGIN","payload","FETCH_PRODUCTS_FAILURE"],"mappings":";;;;;;AAAA,SACIA,wBADJ,EAEIC,sBAFJ,EAGIC,0BAHJ;AAME,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,GAAsD;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AACnE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKC,oBAAL;AAOE,6CACKH,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKL,sBAAL;AAKE,6CACKO,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAHhB;;AAMF,SAAKC,sBAAL;AAQE,6CACKL,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN,KAHxB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAOF;AAEE,aAAOI,KAAP;AA1CJ;AA4CD","sourcesContent":["import {\n    FETCH_LATESTMOVIES_BEGIN,\n    FETCH_PRODUCTS_SUCCESS,\n    FETCH_LATESTMOVIES_FAILURE\n  } from '../Actions/LatestMoviesActions';\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n  \n  export default function productReducer(state = initialState, action) {\n    switch(action.type) {\n      case FETCH_PRODUCTS_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n  \n        //console.log(\"i am in reducer\", action.payload);\n        //console.log(\"i am in reducer2\", action.payload2);\n        \n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_PRODUCTS_SUCCESS:\n         \n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        \n        return {\n          ...state,\n          loading: false,\n          items: action.payload\n        };\n  \n      case FETCH_PRODUCTS_FAILURE:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          items: []\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}